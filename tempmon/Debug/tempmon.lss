
tempmon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  00800064  00800064  00000bde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000c50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ed  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b8  00000000  00000000  00002105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001768  00000000  00000000  00002abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00004228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000706  00000000  00000000  00004378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b2b  00000000  00000000  00004a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000055a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	a0 c1       	rjmp	.+832    	; 0x344 <__vector_1>
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
   6:	6e c0       	rjmp	.+220    	; 0xe4 <__bad_interrupt>
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
   a:	6c c0       	rjmp	.+216    	; 0xe4 <__bad_interrupt>
   c:	ef c3       	rjmp	.+2014   	; 0x7ec <__vector_6>
   e:	6a c0       	rjmp	.+212    	; 0xe4 <__bad_interrupt>
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	68 c0       	rjmp	.+208    	; 0xe4 <__bad_interrupt>
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	66 c0       	rjmp	.+204    	; 0xe4 <__bad_interrupt>
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	64 c0       	rjmp	.+200    	; 0xe4 <__bad_interrupt>
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	62 c0       	rjmp	.+196    	; 0xe4 <__bad_interrupt>
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	60 c0       	rjmp	.+192    	; 0xe4 <__bad_interrupt>
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	06 00       	.word	0x0006	; ????
  28:	ff 09       	sbc	r31, r15
  2a:	01 a1       	ldd	r16, Z+33	; 0x21
  2c:	01 15       	cp	r16, r1
  2e:	00 26       	eor	r0, r16
  30:	ff 00       	.word	0x00ff	; ????
  32:	75 08       	sbc	r7, r5
  34:	95 02       	muls	r25, r21
  36:	09 00       	.word	0x0009	; ????
  38:	b2 02       	muls	r27, r18
  3a:	01 c0       	rjmp	.+2      	; 0x3e <__SP_H__>

0000003c <usbDescriptorConfiguration>:
  3c:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  4c:	00 00 09 21 01 01 00 01 22 16 00 07 05 81 03 08     ...!....".......
  5c:	00 64                                               .d

0000005e <usbDescriptorDevice>:
  5e:	12 01 10 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
  6e:	00 01                                               ..

00000070 <usbDescriptorStringDevice>:
  70:	12 03 54 00 65 00 6d 00 70 00 20 00 6d 00 6f 00     ..T.e.m.p. .m.o.
  80:	6e 00                                               n.

00000082 <usbDescriptorStringVendor>:
  82:	28 03 68 00 6f 00 6d 00 65 00 20 00 70 00 72 00     (.h.o.m.e. .p.r.
  92:	6f 00 64 00 75 00 63 00 74 00 69 00 6f 00 6e 00     o.d.u.c.t.i.o.n.
  a2:	20 00 69 00 6e 00 63 00                              .i.n.c.

000000aa <usbDescriptorString0>:
  aa:	04 03 09 04                                         ....

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf e5       	ldi	r28, 0x5F	; 95
  b4:	d4 e0       	ldi	r29, 0x04	; 4
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	a0 e6       	ldi	r26, 0x60	; 96
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e4       	ldi	r30, 0x46	; 70
  c2:	fb e0       	ldi	r31, 0x0B	; 11
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
  c6:	05 90       	lpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a4 36       	cpi	r26, 0x64	; 100
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	a4 e6       	ldi	r26, 0x64	; 100
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	ad 3a       	cpi	r26, 0xAD	; 173
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	a8 d3       	rcall	.+1872   	; 0x832 <main>
  e2:	2f c5       	rjmp	.+2654   	; 0xb42 <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <ready_wait_for_c>:
.extern TempH_temp
.extern TempL_temp
.extern display
.extern symb

ready_wait_for_c:lds r22,kom_dan_value
  e6:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <kom_dan_value>
                 lds kom_dan,display
  ea:	70 91 60 00 	lds	r23, 0x0060	; 0x800060 <__data_start>

000000ee <ready_wait>:
ready_wait: 
                     
 ;---очікування готовності
 ldi temp,0b00001011 ;порт на
  ee:	2b e0       	ldi	r18, 0x0B	; 11
 out DDRD,temp       ; вхід
  f0:	21 bb       	out	0x11, r18	; 17
 in temp,PORTD        ;без
  f2:	22 b3       	in	r18, 0x12	; 18
 ORI temp,0xF0        ;подтажки
  f4:	20 6f       	ori	r18, 0xF0	; 240
 out PORTD,temp
  f6:	22 bb       	out	0x12, r18	; 18

 cbi PORTD,RS  ; RS 0
  f8:	90 98       	cbi	0x12, 0	; 18
 sbi PORTD,RW  ; R/W 1
  fa:	91 9a       	sbi	0x12, 1	; 18
 nop
  fc:	00 00       	nop
 sbi PORTD,E  ;E 1
  fe:	93 9a       	sbi	0x12, 3	; 18
 ldi r24,0x31      ;--------------------------
 100:	81 e3       	ldi	r24, 0x31	; 49
 ldi r25,0x00      ;   µs
 102:	90 e0       	ldi	r25, 0x00	; 0
 rcall delay       ;--------------------------
 104:	bf d0       	rcall	.+382    	; 0x284 <delay>
 in r19,PinD
 106:	30 b3       	in	r19, 0x10	; 16
 nop
 108:	00 00       	nop
 cbi PORTD,E  ;E 0
 10a:	93 98       	cbi	0x12, 3	; 18
 nop
 10c:	00 00       	nop
 sbi PORTD,E  ;E 1
 10e:	93 9a       	sbi	0x12, 3	; 18
 ldi r24,0x31      ;--------------------------
 110:	81 e3       	ldi	r24, 0x31	; 49
 ldi r25,0x00      ;   µs
 112:	90 e0       	ldi	r25, 0x00	; 0
 rcall delay       ;--------------------------
 114:	b7 d0       	rcall	.+366    	; 0x284 <delay>
 in r20,PinD
 116:	40 b3       	in	r20, 0x10	; 16
 nop
 118:	00 00       	nop
 cbi PORTD,E  ;E 0
 11a:	93 98       	cbi	0x12, 3	; 18
 ldi r24,0x07      ;--------------------------
 11c:	87 e0       	ldi	r24, 0x07	; 7
 ldi r25,0x00      ;   µs
 11e:	90 e0       	ldi	r25, 0x00	; 0
 rcall delay       ;--------------------------
 120:	b1 d0       	rcall	.+354    	; 0x284 <delay>
 sbrc r19,7
 122:	37 fd       	sbrc	r19, 7
 rjmp ready_wait
 124:	e4 cf       	rjmp	.-56     	; 0xee <ready_wait>
 ;   початок відправки команди
 clr temp
 126:	22 27       	eor	r18, r18
 out PORTD,temp
 128:	22 bb       	out	0x12, r18	; 18
 ldi temp,0b11111011 ;порт на
 12a:	2b ef       	ldi	r18, 0xFB	; 251
 out DDRD,temp 
 12c:	21 bb       	out	0x11, r18	; 17
 push kom_dan       ;стек ком_дан
 12e:	7f 93       	push	r23
 andi kom_dan,0xF0  ;і віддавили старшу тетр. байта (молодшу команди) 
 130:	70 7f       	andi	r23, 0xF0	; 240
 out PORTD,R22
 132:	62 bb       	out	0x12, r22	; 18
 nop
 134:	00 00       	nop
 sbi PORTD,E       ;E 1
 136:	93 9a       	sbi	0x12, 3	; 18
 in R22,PORTD      ;копіюєм порт d-
 138:	62 b3       	in	r22, 0x12	; 18
 andi r22,0x0F
 13a:	6f 70       	andi	r22, 0x0F	; 15
 or R22,kom_dan    ;зростили RS,R/W,E і ст тетр. ком_дан
 13c:	67 2b       	or	r22, r23
 out PORTD,R22     ;видали в порт
 13e:	62 bb       	out	0x12, r22	; 18
 ldi r24,0x31      ;--------------------------
 140:	81 e3       	ldi	r24, 0x31	; 49
 ldi r25,0x00      ;   µs
 142:	90 e0       	ldi	r25, 0x00	; 0
 rcall delay       ;--------------------------
 144:	9f d0       	rcall	.+318    	; 0x284 <delay>
 cbi PORTD,E      ;строб в 0
 146:	93 98       	cbi	0x12, 3	; 18
 nop
 148:	00 00       	nop
 nop
 14a:	00 00       	nop
 ;передача другого півбайта
 in temp,PORTD     ;копіюєм порт d
 14c:	22 b3       	in	r18, 0x12	; 18
 andi temp,0x0F    ;выддавили ст.тетр залиш RS,R/W,E 
 14e:	2f 70       	andi	r18, 0x0F	; 15
 pop kom_dan          ;стек ком_дан
 150:	7f 91       	pop	r23
 swap kom_dan       
 152:	72 95       	swap	r23
 andi kom_dan,0xF0    ;і віддавили старшу тетр. байта (старшу команди) 
 154:	70 7f       	andi	r23, 0xF0	; 240
 out PORTD,temp
 156:	22 bb       	out	0x12, r18	; 18
 nop
 158:	00 00       	nop
 sbi PORTD,E         ;строб в 1
 15a:	93 9a       	sbi	0x12, 3	; 18
 in temp,PORTD     ;копіюєм порт d
 15c:	22 b3       	in	r18, 0x12	; 18
 andi temp,0x0F
 15e:	2f 70       	andi	r18, 0x0F	; 15
 or temp,kom_dan       ;зростили RS,R/W,E і ст тетр. ком_дан
 160:	27 2b       	or	r18, r23
 out PORTD,temp    ;відправили в порт 
 162:	22 bb       	out	0x12, r18	; 18
 ldi r24,0x31      ;--------------------------
 164:	81 e3       	ldi	r24, 0x31	; 49
 ldi r25,0x00      ;   µs
 166:	90 e0       	ldi	r25, 0x00	; 0
 rcall delay       ;--------------------------
 168:	8d d0       	rcall	.+282    	; 0x284 <delay>
 cbi PORTD,E         ;строб в 0
 16a:	93 98       	cbi	0x12, 3	; 18
 ldi r24,0x31      ;--------------------------
 16c:	81 e3       	ldi	r24, 0x31	; 49
 ldi r25,0x00      ;   µs
 16e:	90 e0       	ldi	r25, 0x00	; 0
 rcall delay       ;--------------------------
 170:	89 d0       	rcall	.+274    	; 0x284 <delay>
 ldi temp,0b00000011
 172:	23 e0       	ldi	r18, 0x03	; 3
 sbrc r22,1
 174:	61 fd       	sbrc	r22, 1
 ldi temp,0b00000010
 176:	22 e0       	ldi	r18, 0x02	; 2
 out PORTD,temp
 178:	22 bb       	out	0x12, r18	; 18
 ldi temp,0b00001011 ;порт на
 17a:	2b e0       	ldi	r18, 0x0B	; 11
 out DDRD,temp       ; вхід 
 17c:	21 bb       	out	0x11, r18	; 17
 ldi temp,0x30
 17e:	20 e3       	ldi	r18, 0x30	; 48
 sts display,temp
 180:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 ret
 184:	08 95       	ret

00000186 <init_com>:

init_com:	        
 //push temp
 in temp,SREG
 186:	2f b7       	in	r18, 0x3f	; 63
 ;ком ініціалізації (мол тетрарда)
 ldi r24,(0<<RS)|(1<<E)
 188:	88 e0       	ldi	r24, 0x08	; 8
 out PORTD,r24
 18a:	82 bb       	out	0x12, r24	; 18
 or temp,r24
 18c:	28 2b       	or	r18, r24
 out PORTD,temp
 18e:	22 bb       	out	0x12, r18	; 18
 ldi r24,(0<<RS)|(0<<E)
 190:	80 e0       	ldi	r24, 0x00	; 0
 out PORTD,r24
 192:	82 bb       	out	0x12, r24	; 18
 ldi r24,0x31      ;--------------------------
 194:	81 e3       	ldi	r24, 0x31	; 49
 ldi r25,0x00      ;   µs
 196:	90 e0       	ldi	r25, 0x00	; 0
 rcall delay 
 198:	75 d0       	rcall	.+234    	; 0x284 <delay>
 out SREG,temp
 19a:	2f bf       	out	0x3f, r18	; 63
 //pop temp
 ret
 19c:	08 95       	ret

0000019e <reset18b20>:

reset18b20:       ;імпульс скид і присутн
sbi DDRB,L
 19e:	b8 9a       	sbi	0x17, 0	; 23
cbi PORTB,L
 1a0:	c0 98       	cbi	0x18, 0	; 24
;ret
ldi r24,0x9E      ;--------------------------
 1a2:	8e e9       	ldi	r24, 0x9E	; 158
ldi r25,0x05      ;   480µs
 1a4:	95 e0       	ldi	r25, 0x05	; 5
rcall delay       ;--------------------------
 1a6:	6e d0       	rcall	.+220    	; 0x284 <delay>
cbi DDRB,L
 1a8:	b8 98       	cbi	0x17, 0	; 23
cbi PORTB,L
 1aa:	c0 98       	cbi	0x18, 0	; 24
ldi r24,0x2E      ;--------------------------
 1ac:	8e e2       	ldi	r24, 0x2E	; 46
ldi r25,0x00      ;   15µs
 1ae:	90 e0       	ldi	r25, 0x00	; 0
rcall delay       ;----------------------
 1b0:	69 d0       	rcall	.+210    	; 0x284 <delay>

000001b2 <vair>:
vair: sbic PinB,0
 1b2:	b0 99       	sbic	0x16, 0	; 22
rjmp vair
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <vair>
ldi r24,0x9E      ;--------------------------
 1b6:	8e e9       	ldi	r24, 0x9E	; 158
ldi r25,0x05      ;   480µs
 1b8:	95 e0       	ldi	r25, 0x05	; 5
rcall delay       ;--------------------------
 1ba:	64 d0       	rcall	.+200    	; 0x284 <delay>
ret
 1bc:	08 95       	ret

000001be <write_slot>:

 write_slot:       ;слот запису
ldi cou,9
 1be:	49 e0       	ldi	r20, 0x09	; 9

000001c0 <n_bit>:
n_bit: dec cou
 1c0:	4a 95       	dec	r20
cpi cou,0
 1c2:	40 30       	cpi	r20, 0x00	; 0
BRNE sd 
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <sd>
ret
 1c6:	08 95       	ret

000001c8 <sd>:
sd:LSR dsW_R
 1c8:	36 95       	lsr	r19
BRCS wr_1_slot
 1ca:	48 f0       	brcs	.+18     	; 0x1de <wr_1_slot>
BRCC wr_0_slot
 1cc:	00 f4       	brcc	.+0      	; 0x1ce <wr_0_slot>

000001ce <wr_0_slot>:
wr_0_slot:
ldi r24,0xF1      ;--------------------------
 1ce:	81 ef       	ldi	r24, 0xF1	; 241
ldi r25,0x00      ;   80µs
 1d0:	90 e0       	ldi	r25, 0x00	; 0
sbi DDRB,L
 1d2:	b8 9a       	sbi	0x17, 0	; 23
cbi PORTB,L
 1d4:	c0 98       	cbi	0x18, 0	; 24
rcall delay       ;--------------------------
 1d6:	56 d0       	rcall	.+172    	; 0x284 <delay>
cbi PORTB,L
 1d8:	c0 98       	cbi	0x18, 0	; 24
cbi DDRB,L
 1da:	b8 98       	cbi	0x17, 0	; 23
;cbi PORTB,L
rjmp n_bit
 1dc:	f1 cf       	rjmp	.-30     	; 0x1c0 <n_bit>

000001de <wr_1_slot>:
wr_1_slot:
ldi r24,0x2E     ;--------------------------
 1de:	8e e2       	ldi	r24, 0x2E	; 46
ldi r25,0x00      ;   15µs
 1e0:	90 e0       	ldi	r25, 0x00	; 0
sbi DDRB,L
 1e2:	b8 9a       	sbi	0x17, 0	; 23
cbi PORTB,L
 1e4:	c0 98       	cbi	0x18, 0	; 24
rcall delay       ;--------------------------
 1e6:	4e d0       	rcall	.+156    	; 0x284 <delay>
cbi DDRB,L
 1e8:	b8 98       	cbi	0x17, 0	; 23
cbi PORTB,L
 1ea:	c0 98       	cbi	0x18, 0	; 24
ldi r24,0xC4     ;--------------------------
 1ec:	84 ec       	ldi	r24, 0xC4	; 196
ldi r25,0x00      ;   65µs
 1ee:	90 e0       	ldi	r25, 0x00	; 0
rcall delay       ;--------------------------
 1f0:	49 d0       	rcall	.+146    	; 0x284 <delay>
rjmp n_bit
 1f2:	e6 cf       	rjmp	.-52     	; 0x1c0 <n_bit>

000001f4 <read_slot>:

;--------------------------------------------------------
read_slot:       ;слот читання
clr cou
 1f4:	44 27       	eor	r20, r20

000001f6 <ne_bit>:
ne_bit:
sbi DDRB,L
 1f6:	b8 9a       	sbi	0x17, 0	; 23
cbi PORTB,L       ;просадили лінію master
 1f8:	c0 98       	cbi	0x18, 0	; 24
ldi r24,0x04      ;--------------------------
 1fa:	84 e0       	ldi	r24, 0x04	; 4
ldi r25,0x00      ;   1µs
 1fc:	90 e0       	ldi	r25, 0x00	; 0
rcall delay       ;--------------------------
 1fe:	42 d0       	rcall	.+132    	; 0x284 <delay>
cbi DDRB,L        ;відпускаєм
 200:	b8 98       	cbi	0x17, 0	; 23
cbi PORTB,L       ;шину 
 202:	c0 98       	cbi	0x18, 0	; 24
ldi r24,0x25      ;--------------------------
 204:	85 e2       	ldi	r24, 0x25	; 37
ldi r25,0x00      ;   12µs
 206:	90 e0       	ldi	r25, 0x00	; 0
rcall delay       ;--------------------------
 208:	3d d0       	rcall	.+122    	; 0x284 <delay>
in temp,PinB
 20a:	26 b3       	in	r18, 0x16	; 22
lsr temp
 20c:	26 95       	lsr	r18
ROR data
 20e:	37 95       	ror	r19
;inc cou
subi cou,-1
 210:	4f 5f       	subi	r20, 0xFF	; 255
cpi cou,8
 212:	48 30       	cpi	r20, 0x08	; 8
BREQ tim1
 214:	19 f0       	breq	.+6      	; 0x21c <tim1>
cpi cou,16
 216:	40 31       	cpi	r20, 0x10	; 16
BREQ tim2
 218:	21 f0       	breq	.+8      	; 0x222 <tim2>
rjmp ndel
 21a:	06 c0       	rjmp	.+12     	; 0x228 <ndel>

0000021c <tim1>:
tim1:sts TempL_temp,data
 21c:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <TempL_temp>
rjmp ndel
 220:	03 c0       	rjmp	.+6      	; 0x228 <ndel>

00000222 <tim2>:
tim2:sts TempH_temp,data
 222:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <TempH_temp>
ret
 226:	08 95       	ret

00000228 <ndel>:
ndel:ldi r24,0x88      ;--------------------------
 228:	88 e8       	ldi	r24, 0x88	; 136
ldi r25,0x00      ;   45µs
 22a:	90 e0       	ldi	r25, 0x00	; 0
rcall delay       ;--------------------------
 22c:	2b d0       	rcall	.+86     	; 0x284 <delay>
rjmp ne_bit
 22e:	e3 cf       	rjmp	.-58     	; 0x1f6 <ne_bit>
ret
 230:	08 95       	ret

00000232 <vpor>:

vpor:
lds temp,TempH_temp        ;вигр ст.темпер
 232:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <TempH_temp>
swap temp                  ;
 236:	22 95       	swap	r18
andi temp,0xF0             ;віддавили хлам
 238:	20 7f       	andi	r18, 0xF0	; 240
lds r19,TempL_temp         ;загр мол.тет
 23a:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <TempL_temp>
swap r19                   ;
 23e:	32 95       	swap	r19
andi r19,0x0F              ;відав дробн.час
 240:	3f 70       	andi	r19, 0x0F	; 15
or temp,r19                ;зростили знач температури
 242:	23 2b       	or	r18, r19
sts TempH,temp             ;зберегли старший
 244:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <TempH>
lds r19,TempL_temp         ;
 248:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <TempL_temp>
andi r19,0x0F              ;
 24c:	3f 70       	andi	r19, 0x0F	; 15
sts TempL,r19              ;і молодший
 24e:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <TempL>
sbrs temp,7                ;перевірка на мінусовість
 252:	27 ff       	sbrs	r18, 7
rjmp vstplus               ;якщо +
 254:	13 c0       	rjmp	.+38     	; 0x27c <vstplus>
com r19                    ;-------------
 256:	30 95       	com	r19
andi r19,0x0F              ;
 258:	3f 70       	andi	r19, 0x0F	; 15
com temp
 25a:	20 95       	com	r18
ldi r20,1
 25c:	41 e0       	ldi	r20, 0x01	; 1
add r19,r20
 25e:	34 0f       	add	r19, r20
mov r20,r19
 260:	43 2f       	mov	r20, r19
andi r19,0x0F
 262:	3f 70       	andi	r19, 0x0F	; 15
sts TempL,r19              ;плюсовий мінус:)
 264:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <TempL>
swap r20
 268:	42 95       	swap	r20
lsr r20
 26a:	46 95       	lsr	r20
clr r20
 26c:	44 27       	eor	r20, r20
adc temp,r20
 26e:	24 1f       	adc	r18, r20
sts TempH,temp             ;зберегли 
 270:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <TempH>
ldi temp,0x2D              ;
 274:	2d e2       	ldi	r18, 0x2D	; 45
sts symb,temp              ;
 276:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <symb>
ret			               ;----------------------
 27a:	08 95       	ret

0000027c <vstplus>:
vstplus:                   ;встановили плюс
ldi temp,0x2B
 27c:	2b e2       	ldi	r18, 0x2B	; 43
sts symb,temp
 27e:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <symb>
ret
 282:	08 95       	ret

00000284 <delay>:
;------------------------------
delay:
subi r24,1
 284:	81 50       	subi	r24, 0x01	; 1
sbci r25,0           ;затримка
 286:	90 40       	sbci	r25, 0x00	; 0
brcc delay
 288:	e8 f7       	brcc	.-6      	; 0x284 <delay>
ret
 28a:	08 95       	ret

0000028c <delay1>:
delay1:
subi r23,1
 28c:	71 50       	subi	r23, 0x01	; 1
sbci r24,0           ;затримка
 28e:	80 40       	sbci	r24, 0x00	; 0
sbci r25,0
 290:	90 40       	sbci	r25, 0x00	; 0
brcc delay1
 292:	e0 f7       	brcc	.-8      	; 0x28c <delay1>
ret
 294:	08 95       	ret

00000296 <vst_kom>:
ldi r23,0xBE       ;--------------------------
ldi r24,0xD4 
ldi r25,0x01       ;   50 ms
rcall delay1       ;--------------------------
*/
ldi kom_dan,0b00110000
 296:	70 e3       	ldi	r23, 0x30	; 48
ldi r22,0
 298:	60 e0       	ldi	r22, 0x00	; 0
rcall init_com
 29a:	75 df       	rcall	.-278    	; 0x186 <init_com>
ldi r24,0xA0      ;--------------------------
 29c:	80 ea       	ldi	r24, 0xA0	; 160
ldi r25,0x3A      ;   5ms
 29e:	9a e3       	ldi	r25, 0x3A	; 58
rcall delay       ;--------------------------
 2a0:	f1 df       	rcall	.-30     	; 0x284 <delay>
ldi kom_dan,0b00110000
 2a2:	70 e3       	ldi	r23, 0x30	; 48
ldi r22,0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
rcall init_com
 2a6:	6f df       	rcall	.-290    	; 0x186 <init_com>
ldi r24,0x59      ;--------------------------
 2a8:	89 e5       	ldi	r24, 0x59	; 89
ldi r25,0x02      ;   200µs
 2aa:	92 e0       	ldi	r25, 0x02	; 2
rcall delay       ;--------------------------
 2ac:	eb df       	rcall	.-42     	; 0x284 <delay>
ldi kom_dan,0b00110000
 2ae:	70 e3       	ldi	r23, 0x30	; 48
ldi r22,0
 2b0:	60 e0       	ldi	r22, 0x00	; 0
rcall init_com
 2b2:	69 df       	rcall	.-302    	; 0x186 <init_com>
ldi r24,0x97      ;--------------------------
 2b4:	87 e9       	ldi	r24, 0x97	; 151
ldi r25,0x00      ;   50µs
 2b6:	90 e0       	ldi	r25, 0x00	; 0
rcall delay       ;--------------------------
 2b8:	e5 df       	rcall	.-54     	; 0x284 <delay>

;-----------------------------------------------------------------------------------------
ldi kom_dan,0x02  
 2ba:	72 e0       	ldi	r23, 0x02	; 2
ldi r22,0
 2bc:	60 e0       	ldi	r22, 0x00	; 0
rcall ready_wait     
 2be:	17 df       	rcall	.-466    	; 0xee <ready_wait>
ldi kom_dan,0x28
 2c0:	78 e2       	ldi	r23, 0x28	; 40
ldi r22,0
 2c2:	60 e0       	ldi	r22, 0x00	; 0
rcall ready_wait                                                 ;ініціалізація
 2c4:	14 df       	rcall	.-472    	; 0xee <ready_wait>
ldi kom_dan,0x0c
 2c6:	7c e0       	ldi	r23, 0x0C	; 12
ldi r22,0
 2c8:	60 e0       	ldi	r22, 0x00	; 0
rcall ready_wait
 2ca:	11 df       	rcall	.-478    	; 0xee <ready_wait>
ldi kom_dan,0x01
 2cc:	71 e0       	ldi	r23, 0x01	; 1
ldi r22,0
 2ce:	60 e0       	ldi	r22, 0x00	; 0
rcall ready_wait
 2d0:	0e df       	rcall	.-484    	; 0xee <ready_wait>
ldi kom_dan,0x06
 2d2:	76 e0       	ldi	r23, 0x06	; 6
ldi r22,0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
rcall ready_wait 
 2d6:	0b df       	rcall	.-490    	; 0xee <ready_wait>
;----------------------------------------------------------------------------------------
;початок команди
ldi kom_dan,0x74    ;-------------
 2d8:	74 e7       	ldi	r23, 0x74	; 116
ldi r22,1           ;вст букву "t"
 2da:	61 e0       	ldi	r22, 0x01	; 1
rcall ready_wait    ;-------------
 2dc:	08 df       	rcall	.-496    	; 0xee <ready_wait>
ldi kom_dan,0x3D    ;-------------
 2de:	7d e3       	ldi	r23, 0x3D	; 61
ldi r22,1           ;вст знак "="
 2e0:	61 e0       	ldi	r22, 0x01	; 1
rcall ready_wait    ;-------------
 2e2:	05 df       	rcall	.-502    	; 0xee <ready_wait>
;----------------------------------------------------------------------------------------

ret
 2e4:	08 95       	ret

000002e6 <maina>:

maina:

rcall reset18b20    ;процедура скид і готовн
 2e6:	5b df       	rcall	.-330    	; 0x19e <reset18b20>
ldi dsW_R,0xCC      ;пропуск
 2e8:	3c ec       	ldi	r19, 0xCC	; 204
rcall write_slot    ;ROM
 2ea:	69 df       	rcall	.-302    	; 0x1be <write_slot>
ldi dsW_R,0x44      ;конверт
 2ec:	34 e4       	ldi	r19, 0x44	; 68
rcall write_slot    ;темп
 2ee:	67 df       	rcall	.-306    	; 0x1be <write_slot>

000002f0 <rea_vait>:
rea_vait:sbis PinB,L;перевірка
 2f0:	b0 9b       	sbis	0x16, 0	; 22
rjmp rea_vait       ;готовності
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <rea_vait>
rcall reset18b20   ;процедура скид і готовн
 2f4:	54 df       	rcall	.-344    	; 0x19e <reset18b20>
ldi dsW_R,0xCC     ;пропуск
 2f6:	3c ec       	ldi	r19, 0xCC	; 204
rcall write_slot   ;ROM
 2f8:	62 df       	rcall	.-316    	; 0x1be <write_slot>
ldi dsW_R,0xBE     ;читання
 2fa:	3e eb       	ldi	r19, 0xBE	; 190
rcall write_slot   ;памяті
 2fc:	60 df       	rcall	.-320    	; 0x1be <write_slot>
rcall read_slot    ;читаєм температуру
 2fe:	7a df       	rcall	.-268    	; 0x1f4 <read_slot>
rcall reset18b20   ;процедура скид і готовн. тільки температуру)
 300:	4e df       	rcall	.-356    	; 0x19e <reset18b20>
ldi dsW_R,0xCC     ;пропуск
 302:	3c ec       	ldi	r19, 0xCC	; 204
rcall write_slot   ;ROM
 304:	5c df       	rcall	.-328    	; 0x1be <write_slot>

rcall vpor         ;розкидуєм по регістрах
 306:	95 df       	rcall	.-214    	; 0x232 <vpor>
lds kom_dan,symb   ;---------------------------------------------
 308:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <symb>
ldi r22,1          ;встановлення знака
 30c:	61 e0       	ldi	r22, 0x01	; 1
rcall ready_wait   ;----------------------------------------------
 30e:	ef de       	rcall	.-546    	; 0xee <ready_wait>
ldi r23,0x80        ;--------------------------
ldi r24,0x84 
ldi r25,0x1E        ;   50 ms
rcall delay1        ;--------------------------
*/
ret
 310:	08 95       	ret

00000312 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 312:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 314:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 316:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 318:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 31a:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 31c:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 31e:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 320:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 322:	09 c0       	rjmp	.+18     	; 0x336 <usbCrcLoopEntry>

00000324 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 324:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 326:	82 27       	eor	r24, r18

00000328 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 328:	97 95       	ror	r25
    ror     resCrcL
 32a:	87 95       	ror	r24
    brcs    usbCrcNoXor
 32c:	10 f0       	brcs	.+4      	; 0x332 <usbCrcNoXor>
    eor     resCrcL, polyL
 32e:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 330:	95 27       	eor	r25, r21

00000332 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 332:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 334:	c8 f3       	brcs	.-14     	; 0x328 <usbCrcBitLoop>

00000336 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 336:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 338:	a8 f3       	brcs	.-22     	; 0x324 <usbCrcByteLoop>

0000033a <usbCrcReady>:
usbCrcReady:
    ret
 33a:	08 95       	ret

0000033c <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 33c:	ea df       	rcall	.-44     	; 0x312 <usbCrc16>
    st      ptr+, resCrcL
 33e:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 340:	9d 93       	st	X+, r25
    ret
 342:	08 95       	ret

00000344 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 344:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 346:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 348:	cf 93       	push	r28

0000034a <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 34a:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 34c:	98 9b       	sbis	0x13, 0	; 19
    brne    waitForJ        ; just make sure we have ANY timeout
 34e:	e9 f7       	brne	.-6      	; 0x34a <waitForJ>

00000350 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 350:	98 9b       	sbis	0x13, 0	; 19
    rjmp    foundK
 352:	09 c0       	rjmp	.+18     	; 0x366 <foundK>
    sbis    USBIN, USBMINUS
 354:	98 9b       	sbis	0x13, 0	; 19
    rjmp    foundK
 356:	07 c0       	rjmp	.+14     	; 0x366 <foundK>
    sbis    USBIN, USBMINUS
 358:	98 9b       	sbis	0x13, 0	; 19
    rjmp    foundK
 35a:	05 c0       	rjmp	.+10     	; 0x366 <foundK>
    sbis    USBIN, USBMINUS
 35c:	98 9b       	sbis	0x13, 0	; 19
    rjmp    foundK
 35e:	03 c0       	rjmp	.+6      	; 0x366 <foundK>
    sbis    USBIN, USBMINUS
 360:	98 9b       	sbis	0x13, 0	; 19
    rjmp    foundK
 362:	01 c0       	rjmp	.+2      	; 0x366 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 364:	a3 c0       	rjmp	.+326    	; 0x4ac <sofError>

00000366 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 366:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 368:	c0 91 90 00 	lds	r28, 0x0090	; 0x800090 <usbInputBufOffset>
    clr     YH                  ;1 [5]
 36c:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 36e:	c9 56       	subi	r28, 0x69	; 105
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 370:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 372:	98 9b       	sbis	0x13, 0	; 19
    rjmp    haveTwoBitsK    ;2 [10]
 374:	02 c0       	rjmp	.+4      	; 0x37a <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 376:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 378:	eb cf       	rjmp	.-42     	; 0x350 <waitForK>

0000037a <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 37a:	2f 93       	push	r18
    push    x1              ;2 [12]
 37c:	0f 93       	push	r16
    push    x2              ;2 [14]
 37e:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 380:	03 b3       	in	r16, 0x13	; 19
    ldi     shift, 0xff     ;1 [18]
 382:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 384:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 386:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 388:	4f 93       	push	r20
    push    cnt             ;2 [24]
 38a:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 38c:	13 b3       	in	r17, 0x13	; 19
    ser     x3              ;1 [26] [inserted init instruction]
 38e:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 390:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 392:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 394:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 396:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 398:	31 c0       	rjmp	.+98     	; 0x3fc <rxbit2>

0000039a <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 39a:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 39c:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 39e:	13 b3       	in	r17, 0x13	; 19
    ori     shift, 0x01 ;1 [18]
 3a0:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 3a2:	28 c0       	rjmp	.+80     	; 0x3f4 <didUnstuff0>

000003a4 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 3a4:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 3a6:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 3a8:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 3aa:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 3ac:	03 b3       	in	r16, 0x13	; 19
    rjmp    didUnstuff1 ;2 [27]
 3ae:	29 c0       	rjmp	.+82     	; 0x402 <didUnstuff1>

000003b0 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 3b0:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 3b2:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 3b4:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 3b6:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 3b8:	13 b3       	in	r17, 0x13	; 19
    rjmp    didUnstuff2 ;2 [35]
 3ba:	2b c0       	rjmp	.+86     	; 0x412 <didUnstuff2>

000003bc <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 3bc:	13 b3       	in	r17, 0x13	; 19
    andi    x3, ~0x08   ;1 [35]
 3be:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 3c0:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 3c2:	2a c0       	rjmp	.+84     	; 0x418 <didUnstuff3>

000003c4 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 3c4:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 3c6:	03 b3       	in	r16, 0x13	; 19
    ori     shift, 0x10 ;1 [42]
 3c8:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 3ca:	2c c0       	rjmp	.+88     	; 0x424 <didUnstuff4>

000003cc <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 3cc:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 3ce:	13 b3       	in	r17, 0x13	; 19
    ori     shift, 0x20 ;1 [50]
 3d0:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 3d2:	2f c0       	rjmp	.+94     	; 0x432 <didUnstuff5>

000003d4 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 3d4:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 3d6:	03 b3       	in	r16, 0x13	; 19
    ori     shift, 0x40 ;1 [58]
 3d8:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 3da:	32 c0       	rjmp	.+100    	; 0x440 <didUnstuff6>

000003dc <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 3dc:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 3de:	03 b3       	in	r16, 0x13	; 19
    st      y+, x3      ;2 [3] store data
 3e0:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 3e2:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 3e4:	00 00       	nop
    eor     x2, x1      ;1 [6]
 3e6:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 3e8:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 3ea:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 3ec:	13 b3       	in	r17, 0x13	; 19
    andi    x2, USBMASK ;1 [10]
 3ee:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1 [11] SE0 check for bit 1
 3f0:	c9 f1       	breq	.+114    	; 0x464 <se0>
    andi    shift, 0xf9 ;1 [12]
 3f2:	29 7f       	andi	r18, 0xF9	; 249

000003f4 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 3f4:	91 f2       	breq	.-92     	; 0x39a <unstuff0>
    eor     x1, x2      ;1 [14]
 3f6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 3f8:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 3fa:	21 f9       	bld	r18, 1

000003fc <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 3fc:	03 b3       	in	r16, 0x13	; 19
    andi    shift, 0xf3 ;1 [18]
 3fe:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 400:	89 f2       	breq	.-94     	; 0x3a4 <unstuff1>

00000402 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 402:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 404:	58 f1       	brcs	.+86     	; 0x45c <overflow>
    eor     x2, x1      ;1 [22]
 406:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 408:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 40a:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 40c:	13 b3       	in	r17, 0x13	; 19
    andi    shift, 0xe7 ;1 [26]
 40e:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 410:	79 f2       	breq	.-98     	; 0x3b0 <unstuff2>

00000412 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 412:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 414:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 416:	23 f9       	bld	r18, 3

00000418 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 418:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 41a:	81 f2       	breq	.-96     	; 0x3bc <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 41c:	03 b3       	in	r16, 0x13	; 19
    eor     x2, x1      ;1 [34]
 41e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 420:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 422:	24 f9       	bld	r18, 4

00000424 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 424:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 426:	71 f2       	breq	.-100    	; 0x3c4 <unstuff4>
    nop2                ;2 [40]
 428:	00 c0       	rjmp	.+0      	; 0x42a <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 42a:	13 b3       	in	r17, 0x13	; 19
    eor     x1, x2      ;1 [42]
 42c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 42e:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 430:	25 f9       	bld	r18, 5

00000432 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 432:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 434:	59 f2       	breq	.-106    	; 0x3cc <unstuff5>
    nop2                ;2 [48]
 436:	00 c0       	rjmp	.+0      	; 0x438 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 438:	03 b3       	in	r16, 0x13	; 19
    eor     x2, x1      ;1 [50]
 43a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 43c:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 43e:	26 f9       	bld	r18, 6

00000440 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 440:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 442:	40 f2       	brcs	.-112    	; 0x3d4 <unstuff6>
    nop2                ;2 [56]
 444:	00 c0       	rjmp	.+0      	; 0x446 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 446:	13 b3       	in	r17, 0x13	; 19
    eor     x1, x2      ;1 [58]
 448:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 44a:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 44c:	27 f9       	bld	r18, 7

0000044e <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 44e:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 450:	28 f6       	brcc	.-118    	; 0x3dc <rxLoop>

00000452 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 452:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 454:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 456:	13 b3       	in	r17, 0x13	; 19
    nop                 ;1 [66]
 458:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 45a:	f9 cf       	rjmp	.-14     	; 0x44e <didUnstuff7>

0000045c <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 45c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 45e:	1a bf       	out	0x3a, r17	; 58

00000460 <ignorePacket>:
ignorePacket:
    clr     token
 460:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 462:	19 c0       	rjmp	.+50     	; 0x496 <handleSetupOrOut>

00000464 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 464:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 466:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 468:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 46a:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 46c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 46e:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 470:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 472:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 474:	f9 f0       	breq	.+62     	; 0x4b4 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 476:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 478:	e9 f0       	breq	.+58     	; 0x4b4 <handleData>
    lds     shift, usbDeviceAddr;[17]
 47a:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 47e:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 480:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 482:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 484:	ed cf       	rjmp	.-38     	; 0x460 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 486:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 488:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 48a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 48c:	41 f1       	breq	.+80     	; 0x4de <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 48e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 490:	11 f0       	breq	.+4      	; 0x496 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 492:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 494:	29 f7       	brne	.-54     	; 0x460 <ignorePacket>

00000496 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 496:	00 93 95 00 	sts	0x0095, r16	; 0x800095 <usbCurrentTok>

0000049a <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 49a:	3f 91       	pop	r19
 49c:	4f 91       	pop	r20
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	2f 91       	pop	r18
 4a4:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 4a6:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 4a8:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 4aa:	4f cf       	rjmp	.-354    	; 0x34a <waitForJ>

000004ac <sofError>:
sofError:
    POP_RETI                    ;macro call
 4ac:	cf 91       	pop	r28
 4ae:	cf bf       	out	0x3f, r28	; 63
 4b0:	cf 91       	pop	r28
    reti
 4b2:	18 95       	reti

000004b4 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 4b4:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <usbCurrentTok>
    tst     shift               ;[20]
 4b8:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 4ba:	79 f3       	breq	.-34     	; 0x49a <doReturn>
    lds     x2, usbRxLen        ;[22]
 4bc:	10 91 93 00 	lds	r17, 0x0093	; 0x800093 <usbRxLen>
    tst     x2                  ;[24]
 4c0:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 4c2:	69 f5       	brne	.+90     	; 0x51e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 4c4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 4c6:	6a f1       	brmi	.+90     	; 0x522 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 4c8:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 4cc:	20 93 8f 00 	sts	0x008F, r18	; 0x80008f <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 4d0:	10 91 90 00 	lds	r17, 0x0090	; 0x800090 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 4d4:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 4d6:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 4d8:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 4dc:	22 c0       	rjmp	.+68     	; 0x522 <sendAckAndReti>

000004de <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 4de:	00 91 93 00 	lds	r16, 0x0093	; 0x800093 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 4e2:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 4e4:	e4 f4       	brge	.+56     	; 0x51e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 4e6:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 4e8:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 4ea:	49 f4       	brne	.+18     	; 0x4fe <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 4ec:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 4f0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 4f2:	19 c0       	rjmp	.+50     	; 0x526 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 4f4:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 4f8:	c7 e7       	ldi	r28, 0x77	; 119
    ldi     YH, hi8(usbTxBuf)   ;[44]
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 4fc:	18 c0       	rjmp	.+48     	; 0x52e <usbSendAndReti>

000004fe <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 4fe:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 502:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 504:	10 c0       	rjmp	.+32     	; 0x526 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 506:	00 93 82 00 	sts	0x0082, r16	; 0x800082 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 50a:	c3 e8       	ldi	r28, 0x83	; 131
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 50c:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 50e:	0f c0       	rjmp	.+30     	; 0x52e <usbSendAndReti>

00000510 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 510:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 512:	a8 f4       	brcc	.+42     	; 0x53e <doExorN1>
    subi    x4, 1               ;[-3]
 514:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 516:	a9 f4       	brne	.+42     	; 0x542 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 518:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 51a:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 51c:	f9 cf       	rjmp	.-14     	; 0x510 <stuffN1Delay>

0000051e <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 51e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 520:	03 c0       	rjmp	.+6      	; 0x528 <usbSendX3>

00000522 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 522:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 524:	01 c0       	rjmp	.+2      	; 0x528 <usbSendX3>

00000526 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 526:	43 2f       	mov	r20, r19

00000528 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 528:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 52a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 52c:	32 e0       	ldi	r19, 0x02	; 2

0000052e <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 52e:	14 b3       	in	r17, 0x14	; 20
    ori     x2, USBMASK         ;[-11]
 530:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 532:	a8 9a       	sbi	0x15, 0	; 21
    out     USBDDR, x2          ;[-8] <--- acquire bus
 534:	14 bb       	out	0x14, r17	; 20
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 536:	05 b3       	in	r16, 0x15	; 21
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 538:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 53a:	15 e0       	ldi	r17, 0x05	; 5
    push    x4                  ;[-4]
 53c:	5f 93       	push	r21

0000053e <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 53e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 540:	56 e0       	ldi	r21, 0x06	; 6

00000542 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 542:	05 bb       	out	0x15, r16	; 21
    ror     shift               ;[01]
 544:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 546:	20 f4       	brcc	.+8      	; 0x550 <doExorN2>
    subi    x4, 1               ;[03]
 548:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 54a:	21 f4       	brne	.+8      	; 0x554 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 54c:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 54e:	f9 cf       	rjmp	.-14     	; 0x542 <commonN1>

00000550 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 550:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 552:	56 e0       	ldi	r21, 0x06	; 6

00000554 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 554:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 556:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 558:	05 bb       	out	0x15, r16	; 21
    brcs    txBitloop           ;[09]      [25] [41]
 55a:	d0 f2       	brcs	.-76     	; 0x510 <stuffN1Delay>

0000055c <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 55c:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 55e:	28 f4       	brcc	.+10     	; 0x56a <doExor6>
    subi    x4, 1               ;[44]
 560:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 562:	29 f4       	brne	.+10     	; 0x56e <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 564:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 566:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 568:	f9 cf       	rjmp	.-14     	; 0x55c <stuff6Delay>

0000056a <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 56a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 56c:	56 e0       	ldi	r21, 0x06	; 6

0000056e <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 56e:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 570:	05 bb       	out	0x15, r16	; 21
    brcc    doExor7             ;[49]
 572:	20 f4       	brcc	.+8      	; 0x57c <doExor7>
    subi    x4, 1               ;[50]
 574:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 576:	21 f4       	brne	.+8      	; 0x580 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 578:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 57a:	f9 cf       	rjmp	.-14     	; 0x56e <common6>

0000057c <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 57c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 57e:	56 e0       	ldi	r21, 0x06	; 6

00000580 <common7>:
common7:
    ld      shift, y+           ;[53]
 580:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 582:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 584:	05 bb       	out	0x15, r16	; 21
    brne    txByteLoop          ;[57]
 586:	21 f6       	brne	.-120    	; 0x510 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 588:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[59]
 58a:	10 91 94 00 	lds	r17, 0x0094	; 0x800094 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 58e:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 590:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 592:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 594:	05 bb       	out	0x15, r16	; 21
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 596:	11 f0       	breq	.+4      	; 0x59c <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 598:	10 93 8e 00 	sts	0x008E, r17	; 0x80008e <usbDeviceAddr>

0000059c <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 59c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 59e:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 5a0:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 5a2:	14 b3       	in	r17, 0x14	; 20
    cbr     x2, USBMASK         ;[07] set both pins to input
 5a4:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1              ;[08]
 5a6:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 5a8:	4a 7f       	andi	r20, 0xFA	; 250
    pop     x4                  ;[10]
 5aa:	5f 91       	pop	r21
    nop2                        ;[12]
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <skipAddrAssign+0x12>
    nop2                        ;[14]
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 5b0:	05 bb       	out	0x15, r16	; 21
    out     USBDDR, x2          ;[17] <-- release bus now
 5b2:	14 bb       	out	0x14, r17	; 20
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 5b4:	45 bb       	out	0x15, r20	; 21
    rjmp    doReturn
 5b6:	71 cf       	rjmp	.-286    	; 0x49a <doReturn>

000005b8 <usbFunctionRead>:

/* usbFunctionRead() вызывается когда хост запрашивает порцию данных от устройства
 * Для дополнительной информации см. документацию в usbdrv.h
 */
 uchar   usbFunctionRead(uchar *data, uchar len)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	ec 01       	movw	r28, r24
    if(len > bytesRemaining)
 5be:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 5c2:	86 17       	cp	r24, r22
 5c4:	08 f4       	brcc	.+2      	; 0x5c8 <usbFunctionRead+0x10>
        len = bytesRemaining;
 5c6:	68 2f       	mov	r22, r24

    uchar *buffer = (uchar*)&pdata;

    if(!currentAddress)        // Ни один кусок данных еще не прочитан.
 5c8:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <currentAddress>
 5cc:	41 11       	cpse	r20, r1
 5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <usbFunctionRead+0x28>
    {                          // Заполним структуру для передачи
          
            pdata.b1 = TempH;
 5d0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TempH>
 5d4:	e6 e6       	ldi	r30, 0x66	; 102
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	90 83       	st	Z, r25
        
            pdata.b2 = TempL;
 5da:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <TempL>
 5de:	91 83       	std	Z+1, r25	; 0x01
 * Для дополнительной информации см. документацию в usbdrv.h
 */
 uchar   usbFunctionRead(uchar *data, uchar len)
{
    if(len > bytesRemaining)
        len = bytesRemaining;
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0d c0       	rjmp	.+26     	; 0x5fe <usbFunctionRead+0x46>
       
    }

    uchar j;
    for(j=0; j<len; j++)
        data[j] = buffer[j+currentAddress];
 5e4:	29 2f       	mov	r18, r25
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	de 01       	movw	r26, r28
 5ea:	a2 0f       	add	r26, r18
 5ec:	b3 1f       	adc	r27, r19
 5ee:	24 0f       	add	r18, r20
 5f0:	31 1d       	adc	r19, r1
 5f2:	f9 01       	movw	r30, r18
 5f4:	ea 59       	subi	r30, 0x9A	; 154
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	20 81       	ld	r18, Z
 5fa:	2c 93       	st	X, r18
            pdata.b2 = TempL;
       
    }

    uchar j;
    for(j=0; j<len; j++)
 5fc:	9f 5f       	subi	r25, 0xFF	; 255
 5fe:	96 17       	cp	r25, r22
 600:	88 f3       	brcs	.-30     	; 0x5e4 <usbFunctionRead+0x2c>
        data[j] = buffer[j+currentAddress];

    currentAddress += len;
 602:	46 0f       	add	r20, r22
 604:	40 93 65 00 	sts	0x0065, r20	; 0x800065 <currentAddress>
    bytesRemaining -= len;
 608:	86 1b       	sub	r24, r22
 60a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
    return len;
}
 60e:	86 2f       	mov	r24, r22
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <usbFunctionWrite>:

/* ------------------------------------------------------------------------- */
uchar usbFunctionWrite(uchar *data, uchar len)
{
	return 1;
}
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	08 95       	ret

0000061a <usbFunctionSetup>:
/*----------------------------------------------------------------------------*/
usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 61a:	fc 01       	movw	r30, r24
	usbRequest_t    *rq = (void *)data;

	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID устройство */
 61c:	90 81       	ld	r25, Z
 61e:	90 76       	andi	r25, 0x60	; 96
 620:	90 32       	cpi	r25, 0x20	; 32
 622:	99 f4       	brne	.+38     	; 0x64a <usbFunctionSetup+0x30>
		if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 624:	81 81       	ldd	r24, Z+1	; 0x01
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	39 f4       	brne	.+14     	; 0x638 <usbFunctionSetup+0x1e>
			// у нас только одна разновидность репорта, можем игнорировать report-ID
			bytesRemaining = sizeof(struct dataexchange_t);
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
			currentAddress = 0;
 630:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <currentAddress>
			return USB_NO_MSG;  // используем usbFunctionRead() для отправки данных хосту
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	08 95       	ret
			}else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 638:	89 30       	cpi	r24, 0x09	; 9
 63a:	49 f4       	brne	.+18     	; 0x64e <usbFunctionSetup+0x34>
			// у нас только одна разновидность репорта, можем игнорировать report-ID
			bytesRemaining = sizeof(struct dataexchange_t);
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
			currentAddress = 0;
 642:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <currentAddress>
			return USB_NO_MSG;  // используем usbFunctionWrite() для получения данных от хоста
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	08 95       	ret
		}
		}else{
		/* остальные запросы мы просто игнорируем */
	}
	return 0;
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
 64e:	80 e0       	ldi	r24, 0x00	; 0
}
 650:	08 95       	ret

00000652 <con_disp>:
volatile unsigned char te;
volatile unsigned char rou;
volatile unsigned long dia;
volatile unsigned int div_a;
volatile unsigned char symb;
void con_disp(void){
 652:	cf 93       	push	r28
	 maina();
 654:	48 de       	rcall	.-880    	; 0x2e6 <maina>
			kom_dan_value=1;
		    ready_wait_for_c();
			dia = !dia+1;
			}
			*/
		rou=TempH;
 656:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <TempH>
 65a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <rou>
		dia = TempL;
 65e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TempL>
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	a0 e0       	ldi	r26, 0x00	; 0
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <dia>
 66c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <dia+0x1>
 670:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <dia+0x2>
 674:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <dia+0x3>
		while(rou>=100){            //-----------------------------------------------------------------------
 678:	0a c0       	rjmp	.+20     	; 0x68e <con_disp+0x3c>
			rou=rou-100;
 67a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <rou>
 67e:	84 56       	subi	r24, 0x64	; 100
 680:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <rou>
			display++;                //out hundred
 684:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			dia = !dia+1;
			}
			*/
		rou=TempH;
		dia = TempL;
		while(rou>=100){            //-----------------------------------------------------------------------
 68e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <rou>
 692:	84 36       	cpi	r24, 0x64	; 100
 694:	90 f7       	brcc	.-28     	; 0x67a <con_disp+0x28>
			rou=rou-100;
			display++;                //out hundred
		}
		kom_dan_value=1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //------------------
 69c:	24 dd       	rcall	.-1464   	; 0xe6 <ready_wait_for_c>
		while(rou>=10){             //------------------                             rou
 69e:	0a c0       	rjmp	.+20     	; 0x6b4 <con_disp+0x62>
			rou=rou-10;
 6a0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <rou>
 6a4:	8a 50       	subi	r24, 0x0A	; 10
 6a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <rou>
			display++;              //out tens
 6aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			rou=rou-100;
			display++;                //out hundred
		}
		kom_dan_value=1;
		ready_wait_for_c();         //------------------
		while(rou>=10){             //------------------                             rou
 6b4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <rou>
 6b8:	8a 30       	cpi	r24, 0x0A	; 10
 6ba:	90 f7       	brcc	.-28     	; 0x6a0 <con_disp+0x4e>
			rou=rou-10;
			display++;              //out tens
		}
		kom_dan_value=1;
 6bc:	c1 e0       	ldi	r28, 0x01	; 1
 6be:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //------------------
 6c2:	11 dd       	rcall	.-1502   	; 0xe6 <ready_wait_for_c>
		display=0x30+rou;                //out ones
 6c4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <rou>
 6c8:	80 5d       	subi	r24, 0xD0	; 208
 6ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		kom_dan_value=1;
 6ce:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //------------------
 6d2:	09 dd       	rcall	.-1518   	; 0xe6 <ready_wait_for_c>
		
		display=0x2E;
 6d4:	8e e2       	ldi	r24, 0x2E	; 46
 6d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		kom_dan_value=1;
 6da:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //point
 6de:	03 dd       	rcall	.-1530   	; 0xe6 <ready_wait_for_c>
		                            //----------------------------------------------------------------------
		div_a=dia*10000/16;							
 6e0:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <dia>
 6e4:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <dia+0x1>
 6e8:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <dia+0x2>
 6ec:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <dia+0x3>
 6f0:	a0 e1       	ldi	r26, 0x10	; 16
 6f2:	b7 e2       	ldi	r27, 0x27	; 39
 6f4:	10 d2       	rcall	.+1056   	; 0xb16 <__muluhisi3>
 6f6:	dc 01       	movw	r26, r24
 6f8:	cb 01       	movw	r24, r22
 6fa:	68 94       	set
 6fc:	13 f8       	bld	r1, 3
 6fe:	b6 95       	lsr	r27
 700:	a7 95       	ror	r26
 702:	97 95       	ror	r25
 704:	87 95       	ror	r24
 706:	16 94       	lsr	r1
 708:	d1 f7       	brne	.-12     	; 0x6fe <con_disp+0xac>
 70a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <div_a+0x1>
 70e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <div_a>
		while(div_a>=1000){            //------------------
 712:	0f c0       	rjmp	.+30     	; 0x732 <con_disp+0xe0>
			div_a=div_a-1000;
 714:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <div_a>
 718:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <div_a+0x1>
 71c:	88 5e       	subi	r24, 0xE8	; 232
 71e:	93 40       	sbci	r25, 0x03	; 3
 720:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <div_a+0x1>
 724:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <div_a>
			display++;                //out hundred
 728:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 72c:	8f 5f       	subi	r24, 0xFF	; 255
 72e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		display=0x2E;
		kom_dan_value=1;
		ready_wait_for_c();         //point
		                            //----------------------------------------------------------------------
		div_a=dia*10000/16;							
		while(div_a>=1000){            //------------------
 732:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <div_a>
 736:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <div_a+0x1>
 73a:	88 3e       	cpi	r24, 0xE8	; 232
 73c:	93 40       	sbci	r25, 0x03	; 3
 73e:	50 f7       	brcc	.-44     	; 0x714 <con_disp+0xc2>
			div_a=div_a-1000;
			display++;                //out hundred
		}
		kom_dan_value=1;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <kom_dan_value>
		ready_wait_for_c();					
 746:	cf dc       	rcall	.-1634   	; 0xe6 <ready_wait_for_c>
		while(div_a>=100){            //------------------
 748:	0f c0       	rjmp	.+30     	; 0x768 <con_disp+0x116>
			div_a=div_a-100;
 74a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <div_a>
 74e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <div_a+0x1>
 752:	84 56       	subi	r24, 0x64	; 100
 754:	91 09       	sbc	r25, r1
 756:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <div_a+0x1>
 75a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <div_a>
			display++;                //out hundred                                 div
 75e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 762:	8f 5f       	subi	r24, 0xFF	; 255
 764:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			div_a=div_a-1000;
			display++;                //out hundred
		}
		kom_dan_value=1;
		ready_wait_for_c();					
		while(div_a>=100){            //------------------
 768:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <div_a>
 76c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <div_a+0x1>
 770:	84 36       	cpi	r24, 0x64	; 100
 772:	91 05       	cpc	r25, r1
 774:	50 f7       	brcc	.-44     	; 0x74a <con_disp+0xf8>
			div_a=div_a-100;
			display++;                //out hundred                                 div
		}
		kom_dan_value=1;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //------------------
 77c:	b4 dc       	rcall	.-1688   	; 0xe6 <ready_wait_for_c>
		while(div_a>=10){             //------------------
 77e:	0e c0       	rjmp	.+28     	; 0x79c <con_disp+0x14a>
			div_a=div_a-10;
 780:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <div_a>
 784:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <div_a+0x1>
 788:	0a 97       	sbiw	r24, 0x0a	; 10
 78a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <div_a+0x1>
 78e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <div_a>
			display++;              //out tens
 792:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			div_a=div_a-100;
			display++;                //out hundred                                 div
		}
		kom_dan_value=1;
		ready_wait_for_c();         //------------------
		while(div_a>=10){             //------------------
 79c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <div_a>
 7a0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <div_a+0x1>
 7a4:	0a 97       	sbiw	r24, 0x0a	; 10
 7a6:	60 f7       	brcc	.-40     	; 0x780 <con_disp+0x12e>
			div_a=div_a-10;
			display++;              //out tens
		}
		kom_dan_value=1;
 7a8:	c1 e0       	ldi	r28, 0x01	; 1
 7aa:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //------------------
 7ae:	9b dc       	rcall	.-1738   	; 0xe6 <ready_wait_for_c>
		display=(unsigned char)div_a+0x30;                //out ones
 7b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <div_a>
 7b4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <div_a+0x1>
 7b8:	80 5d       	subi	r24, 0xD0	; 208
 7ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		kom_dan_value=1;
 7be:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //------------------------------------------------------------------
 7c2:	91 dc       	rcall	.-1758   	; 0xe6 <ready_wait_for_c>
		display=0x43;
 7c4:	83 e4       	ldi	r24, 0x43	; 67
 7c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		kom_dan_value=1;
 7ca:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <kom_dan_value>
		ready_wait_for_c();         //знак "C"
 7ce:	8b dc       	rcall	.-1770   	; 0xe6 <ready_wait_for_c>

		display=0xDF;
 7d0:	8f ed       	ldi	r24, 0xDF	; 223
 7d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		kom_dan_value=1;            //знак "°"
 7d6:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <kom_dan_value>
		ready_wait_for_c();
 7da:	85 dc       	rcall	.-1782   	; 0xe6 <ready_wait_for_c>
		
		display=0x82;
 7dc:	82 e8       	ldi	r24, 0x82	; 130
 7de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		kom_dan_value=0;
 7e2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <kom_dan_value>
		ready_wait_for_c();
 7e6:	7f dc       	rcall	.-1794   	; 0xe6 <ready_wait_for_c>
}
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <__vector_6>:
ISR(TIMER1_COMPA_vect){
 7ec:	1f 92       	push	r1
 7ee:	0f 92       	push	r0
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	0f 92       	push	r0
 7f4:	11 24       	eor	r1, r1
 7f6:	2f 93       	push	r18
 7f8:	3f 93       	push	r19
 7fa:	4f 93       	push	r20
 7fc:	5f 93       	push	r21
 7fe:	6f 93       	push	r22
 800:	7f 93       	push	r23
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	af 93       	push	r26
 808:	bf 93       	push	r27
 80a:	ef 93       	push	r30
 80c:	ff 93       	push	r31
	con_disp();
 80e:	21 df       	rcall	.-446    	; 0x652 <con_disp>
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <main>:

int main(void)
{
	
	  DDRD= 0b11111011;                // port initialization  
 832:	8b ef       	ldi	r24, 0xFB	; 251
 834:	81 bb       	out	0x11, r24	; 17
	  DDRB= 0b00000001;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	87 bb       	out	0x17, r24	; 23
	//  usbFunctionRead(0x0060, 2);
      usbInit();
 83a:	60 d1       	rcall	.+704    	; 0xafc <usbInit>
      usbDeviceDisconnect();  // принудительно отключаемся от хоста, так делать можно только при выключенных прерываниях!
 83c:	84 b3       	in	r24, 0x14	; 20
 83e:	81 60       	ori	r24, 0x01	; 1
 840:	84 bb       	out	0x14, r24	; 20
      
      uchar i = 0;
 842:	80 e0       	ldi	r24, 0x00	; 0
      while(--i){             // пауза > 250 ms
 844:	06 c0       	rjmp	.+12     	; 0x852 <main+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 846:	e7 eb       	ldi	r30, 0xB7	; 183
 848:	fb e0       	ldi	r31, 0x0B	; 11
 84a:	31 97       	sbiw	r30, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <main+0x18>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <main+0x1e>
 850:	00 00       	nop
 852:	81 50       	subi	r24, 0x01	; 1
 854:	c1 f7       	brne	.-16     	; 0x846 <main+0x14>
	      _delay_ms(1);
      }
      
      usbDeviceConnect();     // подключаемся
 856:	84 b3       	in	r24, 0x14	; 20
 858:	8e 7f       	andi	r24, 0xFE	; 254
 85a:	84 bb       	out	0x14, r24	; 20
	                                             //--------------------------
	  TCCR1B = 1<<WGM12|1<<CS10|0<<CS11|1<<CS12; //compare match mode, prescaler 1024 
 85c:	8d e0       	ldi	r24, 0x0D	; 13
 85e:	8e bd       	out	0x2e, r24	; 46
	  TCNT1H = 0;                                //clean
 860:	1d bc       	out	0x2d, r1	; 45
	  TCNT1L = 0;                                //timer
 862:	1c bc       	out	0x2c, r1	; 44
	  OCR1AH = 0b00010011;                       //compare reg
 864:	83 e1       	ldi	r24, 0x13	; 19
 866:	8b bd       	out	0x2b, r24	; 43
	  OCR1AL = 0b10001000;                       //set 5000 (~500ms)
 868:	88 e8       	ldi	r24, 0x88	; 136
 86a:	8a bd       	out	0x2a, r24	; 42
	  TIMSK = 0<<TOIE1|1<<OCIE1A;                //start compare match mode
 86c:	80 e1       	ldi	r24, 0x10	; 16
 86e:	89 bf       	out	0x39, r24	; 57
	                                             //---------------------------
      sei();                  // разрешаем прерывания
 870:	78 94       	sei
 872:	ff ef       	ldi	r31, 0xFF	; 255
 874:	26 e7       	ldi	r18, 0x76	; 118
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	f1 50       	subi	r31, 0x01	; 1
 87a:	20 40       	sbci	r18, 0x00	; 0
 87c:	80 40       	sbci	r24, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <main+0x46>
 880:	00 c0       	rjmp	.+0      	; 0x882 <main+0x50>
 882:	00 00       	nop

	 _delay_ms(40);
	  vst_kom();
 884:	08 dd       	rcall	.-1520   	; 0x296 <vst_kom>
	
     while (1)
     {
	    usbPoll();
 886:	27 d0       	rcall	.+78     	; 0x8d6 <usbPoll>
 888:	fe cf       	rjmp	.-4      	; 0x886 <main+0x54>

0000088a <usbDeviceRead>:
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
 88a:	dc 01       	movw	r26, r24
 88c:	86 2f       	mov	r24, r22
 88e:	66 23       	and	r22, r22
 890:	09 f1       	breq	.+66     	; 0x8d4 <usbDeviceRead+0x4a>
 892:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <usbMsgFlags>
 896:	99 23       	and	r25, r25
 898:	1c f4       	brge	.+6      	; 0x8a0 <usbDeviceRead+0x16>
 89a:	cd 01       	movw	r24, r26
 89c:	8d de       	rcall	.-742    	; 0x5b8 <usbFunctionRead>
 89e:	08 95       	ret
 8a0:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <usbMsgPtr>
 8a4:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <usbMsgPtr+0x1>
 8a8:	96 ff       	sbrs	r25, 6
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <usbDeviceRead+0x34>
 8ac:	96 2f       	mov	r25, r22
 8ae:	24 91       	lpm	r18, Z
 8b0:	2c 93       	st	X, r18
 8b2:	31 96       	adiw	r30, 0x01	; 1
 8b4:	91 50       	subi	r25, 0x01	; 1
 8b6:	11 96       	adiw	r26, 0x01	; 1
 8b8:	91 11       	cpse	r25, r1
 8ba:	f9 cf       	rjmp	.-14     	; 0x8ae <usbDeviceRead+0x24>
 8bc:	07 c0       	rjmp	.+14     	; 0x8cc <usbDeviceRead+0x42>
 8be:	96 2f       	mov	r25, r22
 8c0:	21 91       	ld	r18, Z+
 8c2:	2c 93       	st	X, r18
 8c4:	91 50       	subi	r25, 0x01	; 1
 8c6:	11 96       	adiw	r26, 0x01	; 1
 8c8:	91 11       	cpse	r25, r1
 8ca:	fa cf       	rjmp	.-12     	; 0x8c0 <usbDeviceRead+0x36>
 8cc:	f0 93 92 00 	sts	0x0092, r31	; 0x800092 <usbMsgPtr+0x1>
 8d0:	e0 93 91 00 	sts	0x0091, r30	; 0x800091 <usbMsgPtr>
 8d4:	08 95       	ret

000008d6 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 8da:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <usbRxLen>
 8de:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 8e0:	0a f4       	brpl	.+2      	; 0x8e4 <usbPoll+0xe>
 8e2:	d0 c0       	rjmp	.+416    	; 0xa84 <usbPoll+0x1ae>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 8e4:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <usbInputBufOffset>
 8e8:	8c e0       	ldi	r24, 0x0C	; 12
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	82 1b       	sub	r24, r18
 8ee:	91 09       	sbc	r25, r1
 8f0:	ec 01       	movw	r28, r24
 8f2:	c9 56       	subi	r28, 0x69	; 105
 8f4:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 8f6:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <usbRxToken>
 8fa:	8d 32       	cpi	r24, 0x2D	; 45
 8fc:	09 f0       	breq	.+2      	; 0x900 <usbPoll+0x2a>
 8fe:	b1 c0       	rjmp	.+354    	; 0xa62 <usbPoll+0x18c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 900:	68 30       	cpi	r22, 0x08	; 8
 902:	09 f0       	breq	.+2      	; 0x906 <usbPoll+0x30>
 904:	bd c0       	rjmp	.+378    	; 0xa80 <usbPoll+0x1aa>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 906:	83 ec       	ldi	r24, 0xC3	; 195
 908:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 90c:	8a e5       	ldi	r24, 0x5A	; 90
 90e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbTxLen>
        usbMsgFlags = 0;
 912:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 916:	88 81       	ld	r24, Y
 918:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 91a:	19 f0       	breq	.+6      	; 0x922 <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 91c:	ce 01       	movw	r24, r28
 91e:	7d de       	rcall	.-774    	; 0x61a <usbFunctionSetup>
 920:	8c c0       	rjmp	.+280    	; 0xa3a <usbPoll+0x164>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 922:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 924:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 928:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 92a:	81 11       	cpse	r24, r1
 92c:	06 c0       	rjmp	.+12     	; 0x93a <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 92e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 932:	20 e8       	ldi	r18, 0x80	; 128
 934:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 936:	82 e0       	ldi	r24, 0x02	; 2
 938:	7c c0       	rjmp	.+248    	; 0xa32 <usbPoll+0x15c>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 93a:	85 30       	cpi	r24, 0x05	; 5
 93c:	31 f4       	brne	.+12     	; 0x94a <usbPoll+0x74>
        usbNewDeviceAddr = value;
 93e:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 942:	20 e8       	ldi	r18, 0x80	; 128
 944:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	74 c0       	rjmp	.+232    	; 0xa32 <usbPoll+0x15c>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 94a:	86 30       	cpi	r24, 0x06	; 6
 94c:	09 f0       	breq	.+2      	; 0x950 <usbPoll+0x7a>
 94e:	51 c0       	rjmp	.+162    	; 0x9f2 <usbPoll+0x11c>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 950:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	41 f4       	brne	.+16     	; 0x966 <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 956:	8e e5       	ldi	r24, 0x5E	; 94
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <usbMsgPtr+0x1>
 95e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbMsgPtr>
 962:	82 e1       	ldi	r24, 0x12	; 18
 964:	42 c0       	rjmp	.+132    	; 0x9ea <usbPoll+0x114>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 966:	82 30       	cpi	r24, 0x02	; 2
 968:	41 f4       	brne	.+16     	; 0x97a <usbPoll+0xa4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 96a:	8c e3       	ldi	r24, 0x3C	; 60
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <usbMsgPtr+0x1>
 972:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbMsgPtr>
 976:	82 e2       	ldi	r24, 0x22	; 34
 978:	38 c0       	rjmp	.+112    	; 0x9ea <usbPoll+0x114>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 97a:	83 30       	cpi	r24, 0x03	; 3
 97c:	f9 f4       	brne	.+62     	; 0x9bc <usbPoll+0xe6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 97e:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 980:	81 11       	cpse	r24, r1
 982:	08 c0       	rjmp	.+16     	; 0x994 <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 984:	8a ea       	ldi	r24, 0xAA	; 170
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <usbMsgPtr+0x1>
 98c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbMsgPtr>
 990:	84 e0       	ldi	r24, 0x04	; 4
 992:	2b c0       	rjmp	.+86     	; 0x9ea <usbPoll+0x114>
        SWITCH_CASE(1)
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	41 f4       	brne	.+16     	; 0x9a8 <usbPoll+0xd2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 998:	82 e8       	ldi	r24, 0x82	; 130
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <usbMsgPtr+0x1>
 9a0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbMsgPtr>
 9a4:	88 e2       	ldi	r24, 0x28	; 40
 9a6:	21 c0       	rjmp	.+66     	; 0x9ea <usbPoll+0x114>
        SWITCH_CASE(2)
 9a8:	82 30       	cpi	r24, 0x02	; 2
 9aa:	e1 f4       	brne	.+56     	; 0x9e4 <usbPoll+0x10e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 9ac:	80 e7       	ldi	r24, 0x70	; 112
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <usbMsgPtr+0x1>
 9b4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbMsgPtr>
 9b8:	82 e1       	ldi	r24, 0x12	; 18
 9ba:	17 c0       	rjmp	.+46     	; 0x9ea <usbPoll+0x114>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 9bc:	81 32       	cpi	r24, 0x21	; 33
 9be:	41 f4       	brne	.+16     	; 0x9d0 <usbPoll+0xfa>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 9c0:	8e e4       	ldi	r24, 0x4E	; 78
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <usbMsgPtr+0x1>
 9c8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbMsgPtr>
 9cc:	89 e0       	ldi	r24, 0x09	; 9
 9ce:	0d c0       	rjmp	.+26     	; 0x9ea <usbPoll+0x114>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 9d0:	82 32       	cpi	r24, 0x22	; 34
 9d2:	51 f4       	brne	.+20     	; 0x9e8 <usbPoll+0x112>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 9d4:	86 e2       	ldi	r24, 0x26	; 38
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <usbMsgPtr+0x1>
 9dc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbMsgPtr>
 9e0:	86 e1       	ldi	r24, 0x16	; 22
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <usbPoll+0x114>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <usbPoll+0x114>
 9e8:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 9ea:	90 e4       	ldi	r25, 0x40	; 64
 9ec:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <usbMsgFlags>
 9f0:	24 c0       	rjmp	.+72     	; 0xa3a <usbPoll+0x164>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 9f2:	88 30       	cpi	r24, 0x08	; 8
 9f4:	99 f0       	breq	.+38     	; 0xa1c <usbPoll+0x146>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 9f6:	89 30       	cpi	r24, 0x09	; 9
 9f8:	31 f4       	brne	.+12     	; 0xa06 <usbPoll+0x130>
        usbConfiguration = value;
 9fa:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 9fe:	20 e8       	ldi	r18, 0x80	; 128
 a00:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <usbPoll+0x15c>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 a06:	8a 30       	cpi	r24, 0x0A	; 10
 a08:	69 f0       	breq	.+26     	; 0xa24 <usbPoll+0x14e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 a0a:	8b 30       	cpi	r24, 0x0B	; 11
 a0c:	79 f4       	brne	.+30     	; 0xa2c <usbPoll+0x156>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 a0e:	8b e4       	ldi	r24, 0x4B	; 75
 a10:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 a14:	20 e8       	ldi	r18, 0x80	; 128
 a16:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	0b c0       	rjmp	.+22     	; 0xa32 <usbPoll+0x15c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 a1c:	26 e9       	ldi	r18, 0x96	; 150
 a1e:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	07 c0       	rjmp	.+14     	; 0xa32 <usbPoll+0x15c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 a24:	20 e8       	ldi	r18, 0x80	; 128
 a26:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <usbPoll+0x15c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 a2c:	20 e8       	ldi	r18, 0x80	; 128
 a2e:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 a30:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 a32:	30 93 92 00 	sts	0x0092, r19	; 0x800092 <usbMsgPtr+0x1>
 a36:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <usbMsgPtr>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 a3a:	8f 3f       	cpi	r24, 0xFF	; 255
 a3c:	41 f4       	brne	.+16     	; 0xa4e <usbPoll+0x178>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 a3e:	98 81       	ld	r25, Y
 a40:	99 23       	and	r25, r25
 a42:	0c f4       	brge	.+2      	; 0xa46 <usbPoll+0x170>
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 a44:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 a46:	90 e8       	ldi	r25, 0x80	; 128
 a48:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <usbMsgFlags>
 a4c:	07 c0       	rjmp	.+14     	; 0xa5c <usbPoll+0x186>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 a4e:	9f 81       	ldd	r25, Y+7	; 0x07
 a50:	91 11       	cpse	r25, r1
 a52:	04 c0       	rjmp	.+8      	; 0xa5c <usbPoll+0x186>
 a54:	9e 81       	ldd	r25, Y+6	; 0x06
 a56:	98 17       	cp	r25, r24
 a58:	08 f4       	brcc	.+2      	; 0xa5c <usbPoll+0x186>
                replyLen = rq->wLength.bytes[0];
 a5a:	89 2f       	mov	r24, r25
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 a5c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
 a60:	0f c0       	rjmp	.+30     	; 0xa80 <usbPoll+0x1aa>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 a62:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <usbMsgFlags>
 a66:	88 23       	and	r24, r24
 a68:	5c f4       	brge	.+22     	; 0xa80 <usbPoll+0x1aa>
            uchar rval = usbFunctionWrite(data, len);
 a6a:	ce 01       	movw	r24, r28
 a6c:	d4 dd       	rcall	.-1112   	; 0x616 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 a6e:	8f 3f       	cpi	r24, 0xFF	; 255
 a70:	21 f4       	brne	.+8      	; 0xa7a <usbPoll+0x1a4>
                usbTxLen = USBPID_STALL;
 a72:	8e e1       	ldi	r24, 0x1E	; 30
 a74:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbTxLen>
 a78:	03 c0       	rjmp	.+6      	; 0xa80 <usbPoll+0x1aa>
            }else if(rval != 0){    /* This was the final package */
 a7a:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 a7c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 a80:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 a84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <usbTxLen>
 a88:	84 ff       	sbrs	r24, 4
 a8a:	29 c0       	rjmp	.+82     	; 0xade <usbPoll+0x208>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 a8c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbMsgLen>
 a90:	8f 3f       	cpi	r24, 0xFF	; 255
 a92:	29 f1       	breq	.+74     	; 0xade <usbPoll+0x208>
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
 a94:	89 30       	cpi	r24, 0x09	; 9
 a96:	10 f4       	brcc	.+4      	; 0xa9c <usbPoll+0x1c6>
static inline void usbBuildTxBlock(void)
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
 a98:	68 2f       	mov	r22, r24
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <usbPoll+0x1c8>
    if(wantLen > 8)
        wantLen = 8;
 a9c:	68 e0       	ldi	r22, 0x08	; 8
    usbMsgLen -= wantLen;
 a9e:	86 1b       	sub	r24, r22
 aa0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 aa4:	e7 e7       	ldi	r30, 0x77	; 119
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	90 81       	ld	r25, Z
 aaa:	88 e8       	ldi	r24, 0x88	; 136
 aac:	89 27       	eor	r24, r25
 aae:	80 83       	st	Z, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
 ab0:	88 e7       	ldi	r24, 0x78	; 120
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	ea de       	rcall	.-556    	; 0x88a <usbDeviceRead>
 ab6:	c8 2f       	mov	r28, r24
    if(len <= 8){           /* valid data packet */
 ab8:	89 30       	cpi	r24, 0x09	; 9
 aba:	58 f4       	brcc	.+22     	; 0xad2 <usbPoll+0x1fc>
        usbCrc16Append(&usbTxBuf[1], len);
 abc:	68 2f       	mov	r22, r24
 abe:	88 e7       	ldi	r24, 0x78	; 120
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	3c dc       	rcall	.-1928   	; 0x33c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 ac4:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 ac6:	cc 30       	cpi	r28, 0x0C	; 12
 ac8:	40 f4       	brcc	.+16     	; 0xada <usbPoll+0x204>
            usbMsgLen = USB_NO_MSG;
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
 ad0:	04 c0       	rjmp	.+8      	; 0xada <usbPoll+0x204>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 ad8:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 ada:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <usbTxLen>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 ade:	94 e1       	ldi	r25, 0x14	; 20
 ae0:	04 c0       	rjmp	.+8      	; 0xaea <usbPoll+0x214>
        uchar usbLineStatus = USBIN & USBMASK;
 ae2:	83 b3       	in	r24, 0x13	; 19
 ae4:	85 70       	andi	r24, 0x05	; 5
        if(usbLineStatus != 0)  /* SE0 has ended */
 ae6:	39 f4       	brne	.+14     	; 0xaf6 <usbPoll+0x220>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 ae8:	91 50       	subi	r25, 0x01	; 1
 aea:	91 11       	cpse	r25, r1
 aec:	fa cf       	rjmp	.-12     	; 0xae2 <usbPoll+0x20c>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 aee:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 af2:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	08 95       	ret

00000afc <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 afc:	85 b7       	in	r24, 0x35	; 53
 afe:	82 60       	ori	r24, 0x02	; 2
 b00:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 b02:	8b b7       	in	r24, 0x3b	; 59
 b04:	80 64       	ori	r24, 0x40	; 64
 b06:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 b08:	e2 e8       	ldi	r30, 0x82	; 130
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	8b e4       	ldi	r24, 0x4B	; 75
 b0e:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 b10:	8a e5       	ldi	r24, 0x5A	; 90
 b12:	80 83       	st	Z, r24
 b14:	08 95       	ret

00000b16 <__muluhisi3>:
 b16:	09 d0       	rcall	.+18     	; 0xb2a <__umulhisi3>
 b18:	a5 9f       	mul	r26, r21
 b1a:	90 0d       	add	r25, r0
 b1c:	b4 9f       	mul	r27, r20
 b1e:	90 0d       	add	r25, r0
 b20:	a4 9f       	mul	r26, r20
 b22:	80 0d       	add	r24, r0
 b24:	91 1d       	adc	r25, r1
 b26:	11 24       	eor	r1, r1
 b28:	08 95       	ret

00000b2a <__umulhisi3>:
 b2a:	a2 9f       	mul	r26, r18
 b2c:	b0 01       	movw	r22, r0
 b2e:	b3 9f       	mul	r27, r19
 b30:	c0 01       	movw	r24, r0
 b32:	a3 9f       	mul	r26, r19
 b34:	01 d0       	rcall	.+2      	; 0xb38 <__umulhisi3+0xe>
 b36:	b2 9f       	mul	r27, r18
 b38:	70 0d       	add	r23, r0
 b3a:	81 1d       	adc	r24, r1
 b3c:	11 24       	eor	r1, r1
 b3e:	91 1d       	adc	r25, r1
 b40:	08 95       	ret

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
